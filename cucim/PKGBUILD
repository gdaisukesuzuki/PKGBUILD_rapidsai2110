# Maintainer: Sven-Hendrik Haase <svenstaro@gmail.com>
# Contributor: bartus <arch-user-repoá˜“bartus.33mail.com>
# Contributor: pingplug <pingplug@foxmail.com>
# Contributor: cornholio <vigo.the.unholy.carpathian@gmail.com>

pkgname=(cucim)
_pkgname=cucim
pkgver=21.10
_pkgver=21.08.01
pkgrel=1
pkgdesc="RAPIDS Memory Manager"
arch=('x86_64')
url="https://rapids.ai/"
license=('custom')
depends=('cudf' 'nccl' 'cuda' 'cmake' 'yasm')
# depends=( 'cumlprims' 'treelite' 'cudf' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf'  'faiss')
# depends=( 'treelite' 'cudf' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf'  'cumlprims')
# depends=('faiss-cuda' 'cudf' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf' 'treelite' 'cumlprims')
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cuda-tools' 'cuda-static' 'cmake' 'python-rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda<1.0.0' 'python-pyarrow-cuda' 'gcc9' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf' 'python-versioneer')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf')
# makedepends=('python-cmake_setuptools' 'protobuf-static')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs')
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git"
source=("${_pkgname}::git+https://github.com/rapidsai/cucim.git#tag=v21.10.00"
"run.patch")
# "cc.patch" "cu.patch" "cmake.patch")
# source=("${_pkgname}::git+https://github.com/rapidsai/cuml.git#branch=branch-${_pkgver}" "cc.patch" "cu.patch" "cmake.patch")
# source=("${_pkgname}::git+https://github.com/rapidsai/cuml.git#tag=v0.19.0")
#  "orc.hpp.patch"
#  "remove_keys.cu.patch"
#  "from.arrow.cu.patch"
#  "cudf_setup.py.patch" "gather.cu.patch" "ipc.cpp.patch" "reader_impl.cu.patch")
#  "cudf_setup.py.patch" "nvst_CMakeLists.txt.patch")
#  "from_arrow.cpp.patch"

sha256sums=('SKIP' 'SKIP')
# sha256sums=('SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' )


prepare() {
  cd "${srcdir}"
  patch -p0 < run.patch
#  patch -p0 < cu.patch
#  patch -p0 < cc.patch
#  patch -p0 < cmake.patch
#  patch -p0 < setup.py.patch
#   patch -p0 < nvst_CMakeLists.txt.patch
#   patch -p0 < gather.cu.patch 
#   patch -p0 < orc.hpp.patch 
#  patch -p0 < cpp.patch
#  patch -p0 < cudf_setup.py.patch
#  patch -p0 < from_arrow.cpp.patch
#   patch -p0 < reader_impl.cu.patch
#   patch -p0 <  from.arrow.cu.patch
#    patch -p0 < ipc.cpp.patch
export SINGLEGPU=OFF
export VERBOSE=1
export BUILD_TYPE=Release
export INSTALL_TARGET=install
export BUILD_ALL_GPU_ARCH=0
export CUCIM_EXTRA_PYTHON_ARGS=""
export NVTX=ON
export CCACHE=OFF
export CLEAN=0
export BUILD_DISABLE_DEPRECATION_WARNING=ON
export BUILD_CUCIM_STD_COMMS=ON
export BUILD_CPP_MG_TESTS=OFF
export BUILD_CPP_TESTS=OFF
# export BUILD_STATIC_FAISS=OFF
export CMAKE_GENERATOR="Ninja"
export SINGLEGPU_CPP_FLAG=OFF
export LIBCUCIM_BUILD_DIR="${srcdir}"/cucim/cpp/build
export CUCIM_EXTRA_CMAKE_ARGS=""
export INSTALL_PREFIX=/usr
export PARALLEL_LEVEL=$(nproc)
export CUDA_HOME=/opt/cuda
export CMAKE_LOG_LEVEL=true
# export CC=/usr/bin/gcc-10
# export CXX=/usr/bin/g++-10
# export LD=/usr/bin/gcc
# export RAFT_PATH=/usr

  
# find cuml/python/cuml -name '*.py' | xargs sed -i -e 's/cp.core.core.ndarray/cp._core.core.ndarray/g'
# find cuml/python/cuml -name '*.py' | xargs sed -i -e 's/sklearn.manifold.t_sne/sklearn.manifold/g'

}

build() {
  # ./build.sh clean
#  ./build.sh --disable_nvtx -v -n libcudf cudf dask_cudf
  
#  ./build.sh -v -n --singlegpu libcuml
#    sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libtreelite.so/g' CMakeFiles/cuml++.dir/link.txt

#     find ../.. -name link.txt | xargs sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libfmt.so\ \/usr\/lib\/libtreelite.so/g'
    
#    sed -i -e 's/\/usr\/lib\/libtreelite.so/\/usr\/lib\/liblapack.so\ \/usr\/lib\/libtreelite.so/g' build.ninja
#    sed -i -e 's/_deps\/treelite-src\/include/_deps\/treelite-build\/include/g' build.ninja
#    sed -i -e 's/\-lgomp/\-lgomp\ \-lfmt/g' build.ninja
#    sed -i -e 's/MLC_USE_CXX11=1/MLC_USE_CXX11=0/g' compile_commands.json
#    sed -i -e 's/I_deps\/treelite-src\/include/I_deps\/treelite-src\/include\ -I_deps\/treelite-build\/include/g' compile_commands.json
   # cmake   --build ${LIBCUML_BUILD_DIR} -v -j10 --target cuml++ cuml ml

  cd "${srcdir}"
#  cp cuml/cpp/build/_deps/treelite-build/include/treelite/version.h cuml/cpp/build/_deps/treelite-src/include/treelite/
  # patch -p0 < cc.patch
}

package_cucim() {
   # provides=('benchmark' 'treelite' 'faiss' 'cuml')
  cd "${srcdir}/cucim"
./build.sh ./run build_local libcucim release Release /usr
./build.sh ./run build_local cuslide release Release /usr
./build.sh ./run build_local cucim release Release /usr

#  DESTDIR="${pkgdir}"  cmake --build ${LIBCUML_BUILD_DIR} -v -j${PARALLEL_LEVEL:-1} --target cuml++ cuml ml prims install
# rm -rf "${pkgdir}"/home
 # cmake --build . -j$(nproc) --target install 
# make  install DESTDIR="${pkgdir}/usr"

  mkdir -p ${pkgdir}/usr
  cp -pr ${srcdir}/cucim/install/bin ${pkgdir}/usr/bin
  cp -pr ${srcdir}/cucim/install/lib ${pkgdir}/usr/lib
  cp -pr ${srcdir}/cucim/install/include ${pkgdir}/usr/include

  cd "${srcdir}/cucim/python/cucim"
  CUDA_HOME=/opt/cuda LD_LIBRARY_PATH=/opt/cuda/lib64:${LD_LIBRARY_PATH} python setup.py install install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}"
  CUDA_HOME=/opt/cuda LD_LIBRARY_PATH=/opt/cuda/lib64:${LD_LIBRARY_PATH} python setup.py build_ext -j${PARALLEL_LEVEL:-1} install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}"


  install -Dm644 ${srcdir}/cucim/LICENSE ${pkgdir}/usr/share/licenses/cucim/LICENSE
  # rm -rf ${pkgdir}/usr/lib/cmake/rmm
  # rm -rf ${pkgdir}/usr/lib/cmake/cuco
  # rm -rf ${pkgdir}/usr/lib/cmake/thrust
  # rm -rf ${pkgdir}/usr/lib/cmake/treelite
  # rm -rf ${pkgdir}/usr/include/rmm
  # rm -rf ${pkgdir}/usr/include/cuco
  # rm -rf ${pkgdir}/usr/include/thrust
  # rm -rf ${pkgdir}/usr/include/treelite
  # rm -rf ${pkgdir}/usr/lib/libtreelite_runtime.so
  # rm -rf ${pkgdir}/usr/lib/libtreelite.so


}



# vim:set ts=2 sw=2 et:
